(ns acme.main
  (:require ["package:flutter/material.dart" :as m]
            [cljd.flutter :as f]
            [cljd.string :as str]
            [dict.core :as d]
            [acme.wiktionary :as wiki]
            [acme.utils :as ut]

            ["package:http/http.dart" :as http]
            ["package:html/parser.dart" :as html-parser]
            ["dart:core" :refer [print]]
            ["dart:convert" :as c]

            ))

(defn data-table [& {:keys [cols rows]}]
  (f/widget
   :get [m/ScaffoldMessenger]
   ;; activate this to get a unwrapped lines
   ;; (m/SingleChildScrollView .scrollDirection m/Axis.horizontal)
   ;; (m/SingleChildScrollView .scrollDirection m/Axis.vertical)
   (m/Expanded
    .child
    (m/ListView
     .children
     (mapv (fn [[title]] (f/widget (m/ListTile .title (m/Text title))))
           rows)))
   #_
   (m/DataTable
    .headingTextStyle (m/TextStyle
                       .fontWeight m/FontWeight.bold
                       .color m/Colors.blue)
    ;; .columnSpacing 18.0
    ;; .sortColumnIndex 1 ;; this doesn't work
    ;; .sortAscending true ;; this doesn't work
    .showBottomBorder true
    .columns (for [col cols]
               (m/DataColumn .label (m/Text col)))
    .rows (for [row rows]
            (m/DataRow .cells (for [cell row] (m/DataCell (m/Text cell))))))
   ;; (.hideCurrentSnackBar scaffold-messenger snackbar)
   ;; (.showSnackBar scaffold-messenger (m/SnackBar .content (m/Text (str "Processing '" @d/input-word "' done"))))
   ))

(defn fetch-translation? [word]
  (and (not (clojure.string/blank? word))
       (empty? (d/find-translations d/dictionary word))))

(defn json-translation [kw word response-json]
  (if-some [{sc .-statusCode body .-body} ^http/Response response-json]
    (case sc
      200
      (let [pages (get-in (c/json.decode body) ["query" "pages"])
            kw-fst-page (first (keys pages))
            fst-page (get-in pages [kw-fst-page])
            title (get-in fst-page ["title"])
            iwlinks (get-in fst-page ["iwlinks"])
            translation ((comp (fn [hm] (get-in hm ["*"])) first) iwlinks)]
        ;; (print (str "\n title: " title
        ;;             "\n iwlinks: " iwlinks
        ;;             "\n translation : " translation))
        {kw [translation]})
      {:err [(str "Couldn't fetch '" word "', status code: " sc)]})))

(defn response-json [kw word]
  (when (fetch-translation? word)
    (let [uri
          #_"https://jsonplaceholder.typicode.com/albums/1"
          (str "https://en.wiktionary.org/w/api.php"
               "?action=query"
               "&prop=iwlinks"
               "&titles=" word
               "&iwprop=url&format=json"
               "&iwprefix=" (name kw)
               #_"&continue=")]
      (print (str "http/get " uri " ..."))
      (http/get (Uri/parse uri)))))

(def translation-results
  (f/widget
   :watch [word d/input-word
           response
           (when (fetch-translation? word)
             (let [uri
                   #_"https://jsonplaceholder.typicode.com/albums/1"
                   ;; "https://en.wiktionary.org/wiki/horse#Translations"
                   (str "https://en.wiktionary.org/wiki/" word
                        #_"#Translations")]
               (print (str "http/get " uri " ..."))
               (http/get (Uri/parse uri))))
           ;; response-json-fr (response-json :fr word)
           ;; response-json-de (response-json :de word)
           ;; response-json-sk (response-json :sk word)
           ]
   (let [results (d/find-translations d/dictionary word)
         result
         (do
           ;; (print (str "(fetch-translation? word): " (fetch-translation? word)))
           (if (fetch-translation? word)
             (if (clojure.string/blank? word)
               (do
                 (print (str "(clojure.string/blank? word): " (clojure.string/blank? word)))
                 {})
               (do
                 ;; (print (str "\n de: " (json-translation :de word response-json-de)
                 ;;             "\n de: " (json-translation :fr word response-json-fr)
                 ;;             "\n sk: " (json-translation :sk word response-json-sk)))
                 (if-some [{sc .-statusCode body .-body} ^http/Response response]
                   (case sc
                     200
                     ((comp
                       (fn [document] (wiki/wiktionary-translations document word)))
                      (html-parser/parse body))
                     {:err [(str "Couldn't fetch '" word "', status code: " sc)]}))))
             (do
               ;; (print (str "results : " results))
               (first results))))]
     (data-table
      :cols [""]
      :rows (mapv (fn [e] [(str/join ", " e)]) (vals result))
      #_
      [["1" "a" "42" "guangzhou"]
       ["2" "b" "10" "guangzhou"]
       ["3" "c" "13" "hongkong"]
       ["4" "d" "11" "guangzhou"]
       ["5" "e" "10" "beijing"]])
     ;; (m/Scaffold :onPressed (.hideCurrentSnackBar scaffold-messenger snackbar))
     )))

(defn main
  []
  (let [form-key (#/(m/GlobalKey m/FormState))]
    (f/run
      (m/MaterialApp
       .title "Dict" .debugShowCheckedModeBanner false
       .home
       (m/SafeArea
        .child
        (m/Scaffold
         .body
         (f/widget
          :get [m/ScaffoldMessenger]
          (m/Form .key form-key)
          (m/Padding .padding (m/EdgeInsets.all 16.0))
          (m/Column .mainAxisAlignment m/MainAxisAlignment.start)
          .children
          [
           (m/TextFormField
            ;; .initialValue "horse"
            ;; .placeholder true
            .decoration (m/InputDecoration
                         ;; .icon (m/Icon m/Icons.person)
                         ;; .labelText "label"
                         .hintText "<Enter word here>"
                         ;; .contentPadding (m/EdgeInsets.all 16)
                         )
            .textAlign m/TextAlign.center
            .validator (fn [value] (if (str/blank? value)
                                     "Enter some word"
                                     (do (reset! d/input-word value)
                                         nil))))
           (m/ElevatedButton
            .onPressed
            (fn []
              (when (.validate (.-currentState form-key))
                (.showSnackBar
                 scaffold-messenger
                 (m/SnackBar .content
                             (m/Text (str "Searching translations of '" @d/input-word "' ..."))))
                #_(m/Text (str "Processing '" @input-word "'"))
                nil))
            .child (m/Text "Translate"))
           translation-results])))))))
