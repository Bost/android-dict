(ns dict.core)

(defn in?
  "true if `sequence` contains `elem`. See (contains? (set sequence) elem)"
  [sequence elem]
  (boolean (some (fn [e] (= elem e)) sequence)))


;; (def entry
;;   {:fr ["un" "une"]
;;    :en ["one" "an" "a" "the"]
;;    :sk ["jedna" "jeden" "jedno" "raz"]
;;    :de ["ein" "eins" "eine" "einen" "einer" "einem" "eines"]
;;    })

;; (def word "one")

(def dict
  [
   ;; {:fr ["salut" "bonjour"]
   ;;  :en ["hello" "hi"]
   ;;  :sk ["ahoj" "ƒçau" "nazdar"]
   ;;  :de ["hallo" "hi"]}

   {:fr ["un" "une"]
    :en ["one" "an" "a" "the"]
    :sk ["jedna" "jeden" "jedno" "raz"]
    :de ["ein" "eins" "eine" "einen" "einer" "einem" "eines"]
    }
   ]
  )

(def dictionary dict)

(defn entry-has-word
  "
  (entry-has-word entry word)
  "
  [entry word]
  (when (some true? (map (fn [synonyms] (in? synonyms word)) (vals entry)))
    entry))

(defn find-translations
  "
  (find-translations dict word)
  "
  [dict word]
  (keep
   (fn [elem-hm]
     (entry-has-word elem-hm word))
   dict))

(def input-word (atom ""))
